ðŸ“„ Setting Up the Backend (Express + MongoDB)

âœ… Step-by-Step Instructions:

1. Create the project structure
   - Inside your main project folder, create a backend directory:
     mkdir backend
     cd backend

2. Initialize a Node.js project
   npm install -y

3. Install backend dependencies
   npm install express dotenv mongoose

4. (Optional) Install Nodemon globally
   npm install -g nodemon

5. Create core files
   - server.js
   - .env

6. Create folders
   - models â†’ contains MongoDB schema
   - routes â†’ contains Express route handlers

   (create a mongoDB atlas account and create a new cluster in database)

7. Add this to your `.env` file (create if not existing):
   PORT=4000
   MONGO_URI=your_mongodb_connection_string_here

8. Code for `server.js`:

   require('dotenv').config()
   const express = require('express')
   const mongoose = require('mongoose')
   const workOutRoutes = require('./routes/workouts.js')

   const app = express()

   // Middleware
   app.use(express.json())

   app.use((req, res, next) => {
     console.log(req.path, req.method)
     next()
   })

   // Routes
   app.use('/api/workOuts', workOutRoutes)

   // DB Connection
   mongoose.connect(process.env.MONGO_URI)
     .then(() => {
       app.listen(process.env.PORT, () => {
         console.log(`connected to mongoDB and listening on port ${process.env.PORT}`)
       })
     })
     .catch((error) => {
       console.log(error)
     })

9. Code for `models/workout.js`:

   const mongoose = require('mongoose')
   const Schema = mongoose.Schema

   const workoutSchema = new Schema({
     title: { type: String, required: true },
     reps: { type: Number, required: true },
     load: { type: Number, required: true }
   }, { timestamps: true })

   module.exports = mongoose.model('Workout', workoutSchema)

10. Code for `routes/workouts.js`:

   const express = require('express')
   const router = express.Router()

   router.get('/', (req, res) => {
     res.json({ mssg: "GET all workouts" })
   })

   router.get('/:id', (req, res) => {
     res.json({ mssg: "GET a single workout" })
   })

   router.post('/', (req, res) => {
     res.json({ mssg: "POST a new workout" })
   })

   router.delete('/:id', (req, res) => {
     res.json({ mssg: "DELETE a workout" })
   })

   router.patch('/:id', (req, res) => {
     res.json({ mssg: "UPDATE a workout" })
   })

   module.exports = router

11. Run the server
   - Start with:
     node server.js
   - Or with:
     nodemon server.js

12. Test endpoints
   - Base URL: http://localhost:4000/api/workOuts
   - Use Postman to test:
     - GET â†’ `/`
     - GET â†’ `/:id`
     - POST â†’ `/` with JSON body
     - DELETE â†’ `/:id`
     - PATCH â†’ `/:id`
